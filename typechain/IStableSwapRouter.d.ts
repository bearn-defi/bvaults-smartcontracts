/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IStableSwapRouterInterface extends ethers.utils.Interface {
  functions: {
    "addLiquidity(address,address,uint256[],uint256[],uint256,uint256)": FunctionFragment;
    "convert(address,address,uint256,uint256,uint256)": FunctionFragment;
    "removeBaseLiquidityOneToken(address,address,uint256,uint8,uint256,uint256)": FunctionFragment;
    "removeLiquidity(address,address,uint256,uint256[],uint256[],uint256)": FunctionFragment;
    "swapFromBase(address,address,uint8,uint8,uint256,uint256,uint256)": FunctionFragment;
    "swapToBase(address,address,uint8,uint8,uint256,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [
      string,
      string,
      BigNumberish[],
      BigNumberish[],
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "convert",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeBaseLiquidityOneToken",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish[],
      BigNumberish[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapFromBase",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapToBase",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "convert", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeBaseLiquidityOneToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapFromBase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapToBase", data: BytesLike): Result;

  events: {};
}

export class IStableSwapRouter extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IStableSwapRouterInterface;

  functions: {
    addLiquidity(
      pool: string,
      basePool: string,
      meta_amounts: BigNumberish[],
      base_amounts: BigNumberish[],
      minToMint: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addLiquidity(address,address,uint256[],uint256[],uint256,uint256)"(
      pool: string,
      basePool: string,
      meta_amounts: BigNumberish[],
      base_amounts: BigNumberish[],
      minToMint: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    convert(
      fromPool: string,
      toPool: string,
      amount: BigNumberish,
      minToMint: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "convert(address,address,uint256,uint256,uint256)"(
      fromPool: string,
      toPool: string,
      amount: BigNumberish,
      minToMint: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeBaseLiquidityOneToken(
      pool: string,
      basePool: string,
      _token_amount: BigNumberish,
      i: BigNumberish,
      _min_amount: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeBaseLiquidityOneToken(address,address,uint256,uint8,uint256,uint256)"(
      pool: string,
      basePool: string,
      _token_amount: BigNumberish,
      i: BigNumberish,
      _min_amount: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeLiquidity(
      pool: string,
      basePool: string,
      _amount: BigNumberish,
      min_amounts_meta: BigNumberish[],
      min_amounts_base: BigNumberish[],
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeLiquidity(address,address,uint256,uint256[],uint256[],uint256)"(
      pool: string,
      basePool: string,
      _amount: BigNumberish,
      min_amounts_meta: BigNumberish[],
      min_amounts_base: BigNumberish[],
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    swapFromBase(
      pool: string,
      basePool: string,
      tokenIndexFrom: BigNumberish,
      tokenIndexTo: BigNumberish,
      dx: BigNumberish,
      minDy: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swapFromBase(address,address,uint8,uint8,uint256,uint256,uint256)"(
      pool: string,
      basePool: string,
      tokenIndexFrom: BigNumberish,
      tokenIndexTo: BigNumberish,
      dx: BigNumberish,
      minDy: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    swapToBase(
      pool: string,
      basePool: string,
      tokenIndexFrom: BigNumberish,
      tokenIndexTo: BigNumberish,
      dx: BigNumberish,
      minDy: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swapToBase(address,address,uint8,uint8,uint256,uint256,uint256)"(
      pool: string,
      basePool: string,
      tokenIndexFrom: BigNumberish,
      tokenIndexTo: BigNumberish,
      dx: BigNumberish,
      minDy: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  addLiquidity(
    pool: string,
    basePool: string,
    meta_amounts: BigNumberish[],
    base_amounts: BigNumberish[],
    minToMint: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addLiquidity(address,address,uint256[],uint256[],uint256,uint256)"(
    pool: string,
    basePool: string,
    meta_amounts: BigNumberish[],
    base_amounts: BigNumberish[],
    minToMint: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  convert(
    fromPool: string,
    toPool: string,
    amount: BigNumberish,
    minToMint: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "convert(address,address,uint256,uint256,uint256)"(
    fromPool: string,
    toPool: string,
    amount: BigNumberish,
    minToMint: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeBaseLiquidityOneToken(
    pool: string,
    basePool: string,
    _token_amount: BigNumberish,
    i: BigNumberish,
    _min_amount: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeBaseLiquidityOneToken(address,address,uint256,uint8,uint256,uint256)"(
    pool: string,
    basePool: string,
    _token_amount: BigNumberish,
    i: BigNumberish,
    _min_amount: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeLiquidity(
    pool: string,
    basePool: string,
    _amount: BigNumberish,
    min_amounts_meta: BigNumberish[],
    min_amounts_base: BigNumberish[],
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeLiquidity(address,address,uint256,uint256[],uint256[],uint256)"(
    pool: string,
    basePool: string,
    _amount: BigNumberish,
    min_amounts_meta: BigNumberish[],
    min_amounts_base: BigNumberish[],
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  swapFromBase(
    pool: string,
    basePool: string,
    tokenIndexFrom: BigNumberish,
    tokenIndexTo: BigNumberish,
    dx: BigNumberish,
    minDy: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swapFromBase(address,address,uint8,uint8,uint256,uint256,uint256)"(
    pool: string,
    basePool: string,
    tokenIndexFrom: BigNumberish,
    tokenIndexTo: BigNumberish,
    dx: BigNumberish,
    minDy: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  swapToBase(
    pool: string,
    basePool: string,
    tokenIndexFrom: BigNumberish,
    tokenIndexTo: BigNumberish,
    dx: BigNumberish,
    minDy: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swapToBase(address,address,uint8,uint8,uint256,uint256,uint256)"(
    pool: string,
    basePool: string,
    tokenIndexFrom: BigNumberish,
    tokenIndexTo: BigNumberish,
    dx: BigNumberish,
    minDy: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    addLiquidity(
      pool: string,
      basePool: string,
      meta_amounts: BigNumberish[],
      base_amounts: BigNumberish[],
      minToMint: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "addLiquidity(address,address,uint256[],uint256[],uint256,uint256)"(
      pool: string,
      basePool: string,
      meta_amounts: BigNumberish[],
      base_amounts: BigNumberish[],
      minToMint: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convert(
      fromPool: string,
      toPool: string,
      amount: BigNumberish,
      minToMint: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "convert(address,address,uint256,uint256,uint256)"(
      fromPool: string,
      toPool: string,
      amount: BigNumberish,
      minToMint: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeBaseLiquidityOneToken(
      pool: string,
      basePool: string,
      _token_amount: BigNumberish,
      i: BigNumberish,
      _min_amount: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeBaseLiquidityOneToken(address,address,uint256,uint8,uint256,uint256)"(
      pool: string,
      basePool: string,
      _token_amount: BigNumberish,
      i: BigNumberish,
      _min_amount: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeLiquidity(
      pool: string,
      basePool: string,
      _amount: BigNumberish,
      min_amounts_meta: BigNumberish[],
      min_amounts_base: BigNumberish[],
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeLiquidity(address,address,uint256,uint256[],uint256[],uint256)"(
      pool: string,
      basePool: string,
      _amount: BigNumberish,
      min_amounts_meta: BigNumberish[],
      min_amounts_base: BigNumberish[],
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    swapFromBase(
      pool: string,
      basePool: string,
      tokenIndexFrom: BigNumberish,
      tokenIndexTo: BigNumberish,
      dx: BigNumberish,
      minDy: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "swapFromBase(address,address,uint8,uint8,uint256,uint256,uint256)"(
      pool: string,
      basePool: string,
      tokenIndexFrom: BigNumberish,
      tokenIndexTo: BigNumberish,
      dx: BigNumberish,
      minDy: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapToBase(
      pool: string,
      basePool: string,
      tokenIndexFrom: BigNumberish,
      tokenIndexTo: BigNumberish,
      dx: BigNumberish,
      minDy: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "swapToBase(address,address,uint8,uint8,uint256,uint256,uint256)"(
      pool: string,
      basePool: string,
      tokenIndexFrom: BigNumberish,
      tokenIndexTo: BigNumberish,
      dx: BigNumberish,
      minDy: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    addLiquidity(
      pool: string,
      basePool: string,
      meta_amounts: BigNumberish[],
      base_amounts: BigNumberish[],
      minToMint: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addLiquidity(address,address,uint256[],uint256[],uint256,uint256)"(
      pool: string,
      basePool: string,
      meta_amounts: BigNumberish[],
      base_amounts: BigNumberish[],
      minToMint: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    convert(
      fromPool: string,
      toPool: string,
      amount: BigNumberish,
      minToMint: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "convert(address,address,uint256,uint256,uint256)"(
      fromPool: string,
      toPool: string,
      amount: BigNumberish,
      minToMint: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeBaseLiquidityOneToken(
      pool: string,
      basePool: string,
      _token_amount: BigNumberish,
      i: BigNumberish,
      _min_amount: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeBaseLiquidityOneToken(address,address,uint256,uint8,uint256,uint256)"(
      pool: string,
      basePool: string,
      _token_amount: BigNumberish,
      i: BigNumberish,
      _min_amount: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeLiquidity(
      pool: string,
      basePool: string,
      _amount: BigNumberish,
      min_amounts_meta: BigNumberish[],
      min_amounts_base: BigNumberish[],
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeLiquidity(address,address,uint256,uint256[],uint256[],uint256)"(
      pool: string,
      basePool: string,
      _amount: BigNumberish,
      min_amounts_meta: BigNumberish[],
      min_amounts_base: BigNumberish[],
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    swapFromBase(
      pool: string,
      basePool: string,
      tokenIndexFrom: BigNumberish,
      tokenIndexTo: BigNumberish,
      dx: BigNumberish,
      minDy: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "swapFromBase(address,address,uint8,uint8,uint256,uint256,uint256)"(
      pool: string,
      basePool: string,
      tokenIndexFrom: BigNumberish,
      tokenIndexTo: BigNumberish,
      dx: BigNumberish,
      minDy: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    swapToBase(
      pool: string,
      basePool: string,
      tokenIndexFrom: BigNumberish,
      tokenIndexTo: BigNumberish,
      dx: BigNumberish,
      minDy: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "swapToBase(address,address,uint8,uint8,uint256,uint256,uint256)"(
      pool: string,
      basePool: string,
      tokenIndexFrom: BigNumberish,
      tokenIndexTo: BigNumberish,
      dx: BigNumberish,
      minDy: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addLiquidity(
      pool: string,
      basePool: string,
      meta_amounts: BigNumberish[],
      base_amounts: BigNumberish[],
      minToMint: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addLiquidity(address,address,uint256[],uint256[],uint256,uint256)"(
      pool: string,
      basePool: string,
      meta_amounts: BigNumberish[],
      base_amounts: BigNumberish[],
      minToMint: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    convert(
      fromPool: string,
      toPool: string,
      amount: BigNumberish,
      minToMint: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "convert(address,address,uint256,uint256,uint256)"(
      fromPool: string,
      toPool: string,
      amount: BigNumberish,
      minToMint: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeBaseLiquidityOneToken(
      pool: string,
      basePool: string,
      _token_amount: BigNumberish,
      i: BigNumberish,
      _min_amount: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeBaseLiquidityOneToken(address,address,uint256,uint8,uint256,uint256)"(
      pool: string,
      basePool: string,
      _token_amount: BigNumberish,
      i: BigNumberish,
      _min_amount: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeLiquidity(
      pool: string,
      basePool: string,
      _amount: BigNumberish,
      min_amounts_meta: BigNumberish[],
      min_amounts_base: BigNumberish[],
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeLiquidity(address,address,uint256,uint256[],uint256[],uint256)"(
      pool: string,
      basePool: string,
      _amount: BigNumberish,
      min_amounts_meta: BigNumberish[],
      min_amounts_base: BigNumberish[],
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    swapFromBase(
      pool: string,
      basePool: string,
      tokenIndexFrom: BigNumberish,
      tokenIndexTo: BigNumberish,
      dx: BigNumberish,
      minDy: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swapFromBase(address,address,uint8,uint8,uint256,uint256,uint256)"(
      pool: string,
      basePool: string,
      tokenIndexFrom: BigNumberish,
      tokenIndexTo: BigNumberish,
      dx: BigNumberish,
      minDy: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    swapToBase(
      pool: string,
      basePool: string,
      tokenIndexFrom: BigNumberish,
      tokenIndexTo: BigNumberish,
      dx: BigNumberish,
      minDy: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swapToBase(address,address,uint8,uint8,uint256,uint256,uint256)"(
      pool: string,
      basePool: string,
      tokenIndexFrom: BigNumberish,
      tokenIndexTo: BigNumberish,
      dx: BigNumberish,
      minDy: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
