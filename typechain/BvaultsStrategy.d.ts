/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface BvaultsStrategyInterface extends ethers.utils.Interface {
  functions: {
    "busdAddress()": FunctionFragment;
    "buyBackAddress1()": FunctionFragment;
    "buyBackAddress2()": FunctionFragment;
    "buyBackRate1()": FunctionFragment;
    "buyBackRate2()": FunctionFragment;
    "buyBackRateMax()": FunctionFragment;
    "buyBackRateUL()": FunctionFragment;
    "buyBackToken1()": FunctionFragment;
    "buyBackToken2()": FunctionFragment;
    "controllerFee()": FunctionFragment;
    "controllerFeeMax()": FunctionFragment;
    "controllerFeeUL()": FunctionFragment;
    "convertDustToEarned()": FunctionFragment;
    "deposit(address,uint256)": FunctionFragment;
    "earn()": FunctionFragment;
    "earnedAddress()": FunctionFragment;
    "earnedToBusdPath(uint256)": FunctionFragment;
    "earnedToBuyBackToken1Path(uint256)": FunctionFragment;
    "earnedToBuyBackToken2Path(uint256)": FunctionFragment;
    "earnedToToken0Path(uint256)": FunctionFragment;
    "earnedToToken1Path(uint256)": FunctionFragment;
    "entranceFeeFactor()": FunctionFragment;
    "entranceFeeFactorLL()": FunctionFragment;
    "entranceFeeFactorMax()": FunctionFragment;
    "executeTransaction(address,uint256,string,bytes)": FunctionFragment;
    "farm()": FunctionFragment;
    "farmContractAddress()": FunctionFragment;
    "inCaseTokensGetStuck(address,uint256,address)": FunctionFragment;
    "isAuthorised(address)": FunctionFragment;
    "isAutoComp()": FunctionFragment;
    "isCAKEStaking()": FunctionFragment;
    "lastEarnBlock()": FunctionFragment;
    "notPublic()": FunctionFragment;
    "operator()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "pendingHarvest()": FunctionFragment;
    "pendingHarvestDollarValue()": FunctionFragment;
    "pid()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setBuyBackAddress1(address)": FunctionFragment;
    "setBuyBackAddress2(address)": FunctionFragment;
    "setBuyBackRate1(uint256)": FunctionFragment;
    "setBuyBackRate2(uint256)": FunctionFragment;
    "setControllerFee(uint256)": FunctionFragment;
    "setEarnedToBusdPath(address[])": FunctionFragment;
    "setEarnedToBuyBackToken1Path(address[])": FunctionFragment;
    "setEarnedToBuyBackToken2Path(address[])": FunctionFragment;
    "setEarnedToToken0Path(address[])": FunctionFragment;
    "setEarnedToToken1Path(address[])": FunctionFragment;
    "setEntranceFeeFactor(uint256)": FunctionFragment;
    "setNotPublic(bool)": FunctionFragment;
    "setOperator(address)": FunctionFragment;
    "setStrategist(address)": FunctionFragment;
    "setTimelock(address)": FunctionFragment;
    "setToken0ToEarnedPath(address[])": FunctionFragment;
    "setToken1ToEarnedPath(address[])": FunctionFragment;
    "sharesTotal()": FunctionFragment;
    "strategist()": FunctionFragment;
    "timelock()": FunctionFragment;
    "token0Address()": FunctionFragment;
    "token0ToEarnedPath(uint256)": FunctionFragment;
    "token1Address()": FunctionFragment;
    "token1ToEarnedPath(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "uniExchangeRate(uint256,address[])": FunctionFragment;
    "uniRouterAddress()": FunctionFragment;
    "unpause()": FunctionFragment;
    "wantAddress()": FunctionFragment;
    "wantLockedTotal()": FunctionFragment;
    "wbnbAddress()": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "busdAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyBackAddress1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyBackAddress2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyBackRate1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyBackRate2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyBackRateMax",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyBackRateUL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyBackToken1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyBackToken2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "controllerFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "controllerFeeMax",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "controllerFeeUL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "convertDustToEarned",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "earn", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "earnedAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "earnedToBusdPath",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "earnedToBuyBackToken1Path",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "earnedToBuyBackToken2Path",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "earnedToToken0Path",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "earnedToToken1Path",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "entranceFeeFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "entranceFeeFactorLL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "entranceFeeFactorMax",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeTransaction",
    values: [string, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "farm", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "farmContractAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "inCaseTokensGetStuck",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorised",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isAutoComp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isCAKEStaking",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastEarnBlock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "notPublic", values?: undefined): string;
  encodeFunctionData(functionFragment: "operator", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingHarvest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingHarvestDollarValue",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pid", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBuyBackAddress1",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setBuyBackAddress2",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setBuyBackRate1",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBuyBackRate2",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setControllerFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setEarnedToBusdPath",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setEarnedToBuyBackToken1Path",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setEarnedToBuyBackToken2Path",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setEarnedToToken0Path",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setEarnedToToken1Path",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setEntranceFeeFactor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNotPublic",
    values: [boolean]
  ): string;
  encodeFunctionData(functionFragment: "setOperator", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setStrategist",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setTimelock", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setToken0ToEarnedPath",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setToken1ToEarnedPath",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "sharesTotal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "strategist",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "timelock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "token0Address",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "token0ToEarnedPath",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "token1Address",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "token1ToEarnedPath",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "uniExchangeRate",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "uniRouterAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "wantAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wantLockedTotal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wbnbAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "busdAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyBackAddress1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyBackAddress2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyBackRate1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyBackRate2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyBackRateMax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyBackRateUL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyBackToken1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyBackToken2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "controllerFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "controllerFeeMax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "controllerFeeUL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertDustToEarned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "earn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "earnedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "earnedToBusdPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "earnedToBuyBackToken1Path",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "earnedToBuyBackToken2Path",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "earnedToToken0Path",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "earnedToToken1Path",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "entranceFeeFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "entranceFeeFactorLL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "entranceFeeFactorMax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "farm", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "farmContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inCaseTokensGetStuck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorised",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAutoComp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isCAKEStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastEarnBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "notPublic", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "operator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingHarvest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingHarvestDollarValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBuyBackAddress1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBuyBackAddress2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBuyBackRate1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBuyBackRate2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setControllerFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEarnedToBusdPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEarnedToBuyBackToken1Path",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEarnedToBuyBackToken2Path",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEarnedToToken0Path",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEarnedToToken1Path",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEntranceFeeFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNotPublic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStrategist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTimelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setToken0ToEarnedPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setToken1ToEarnedPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sharesTotal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "strategist", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "timelock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "token0Address",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "token0ToEarnedPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "token1Address",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "token1ToEarnedPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniExchangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniRouterAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "wantAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wantLockedTotal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wbnbAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "BuyBack(address,address,uint256,uint256,address)": EventFragment;
    "Compound(address,uint256,address,uint256)": EventFragment;
    "ConvertDustToEarned(address,address,uint256)": EventFragment;
    "Deposit(uint256)": EventFragment;
    "DistributeFee(address,uint256,address)": EventFragment;
    "Earned(address,uint256)": EventFragment;
    "ExecuteTransaction(address,uint256,string,bytes)": EventFragment;
    "Farm(uint256)": EventFragment;
    "InCaseTokensGetStuck(address,uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Withdraw(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BuyBack"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Compound"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConvertDustToEarned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DistributeFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Earned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecuteTransaction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Farm"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InCaseTokensGetStuck"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export class BvaultsStrategy extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: BvaultsStrategyInterface;

  functions: {
    busdAddress(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "busdAddress()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    buyBackAddress1(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "buyBackAddress1()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    buyBackAddress2(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "buyBackAddress2()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    buyBackRate1(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "buyBackRate1()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    buyBackRate2(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "buyBackRate2()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    buyBackRateMax(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "buyBackRateMax()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    buyBackRateUL(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "buyBackRateUL()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    buyBackToken1(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "buyBackToken1()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    buyBackToken2(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "buyBackToken2()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    controllerFee(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "controllerFee()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    controllerFeeMax(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "controllerFeeMax()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    controllerFeeUL(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "controllerFeeUL()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    convertDustToEarned(overrides?: Overrides): Promise<ContractTransaction>;

    "convertDustToEarned()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deposit(
      arg0: string,
      _wantAmt: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deposit(address,uint256)"(
      arg0: string,
      _wantAmt: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    earn(overrides?: Overrides): Promise<ContractTransaction>;

    "earn()"(overrides?: Overrides): Promise<ContractTransaction>;

    earnedAddress(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "earnedAddress()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    earnedToBusdPath(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "earnedToBusdPath(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    earnedToBuyBackToken1Path(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "earnedToBuyBackToken1Path(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    earnedToBuyBackToken2Path(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "earnedToBuyBackToken2Path(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    earnedToToken0Path(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "earnedToToken0Path(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    earnedToToken1Path(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "earnedToToken1Path(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    entranceFeeFactor(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "entranceFeeFactor()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    entranceFeeFactorLL(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "entranceFeeFactorLL()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    entranceFeeFactorMax(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "entranceFeeFactorMax()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    executeTransaction(
      target: string,
      value: BigNumberish,
      signature: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "executeTransaction(address,uint256,string,bytes)"(
      target: string,
      value: BigNumberish,
      signature: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    farm(overrides?: Overrides): Promise<ContractTransaction>;

    "farm()"(overrides?: Overrides): Promise<ContractTransaction>;

    farmContractAddress(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "farmContractAddress()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    inCaseTokensGetStuck(
      _token: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "inCaseTokensGetStuck(address,uint256,address)"(
      _token: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isAuthorised(
      _account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isAuthorised(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isAutoComp(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isAutoComp()"(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isCAKEStaking(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isCAKEStaking()"(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    lastEarnBlock(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "lastEarnBlock()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    notPublic(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "notPublic()"(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    operator(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "operator()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "owner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    pause(overrides?: Overrides): Promise<ContractTransaction>;

    "pause()"(overrides?: Overrides): Promise<ContractTransaction>;

    paused(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "paused()"(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    pendingHarvest(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "pendingHarvest()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    pendingHarvestDollarValue(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "pendingHarvestDollarValue()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    pid(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "pid()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    setBuyBackAddress1(
      _buyBackAddress1: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setBuyBackAddress1(address)"(
      _buyBackAddress1: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setBuyBackAddress2(
      _buyBackAddress2: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setBuyBackAddress2(address)"(
      _buyBackAddress2: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setBuyBackRate1(
      _buyBackRate1: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setBuyBackRate1(uint256)"(
      _buyBackRate1: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setBuyBackRate2(
      _buyBackRate2: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setBuyBackRate2(uint256)"(
      _buyBackRate2: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setControllerFee(
      _controllerFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setControllerFee(uint256)"(
      _controllerFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setEarnedToBusdPath(
      _path: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setEarnedToBusdPath(address[])"(
      _path: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setEarnedToBuyBackToken1Path(
      _path: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setEarnedToBuyBackToken1Path(address[])"(
      _path: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setEarnedToBuyBackToken2Path(
      _path: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setEarnedToBuyBackToken2Path(address[])"(
      _path: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setEarnedToToken0Path(
      _path: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setEarnedToToken0Path(address[])"(
      _path: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setEarnedToToken1Path(
      _path: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setEarnedToToken1Path(address[])"(
      _path: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setEntranceFeeFactor(
      _entranceFeeFactor: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setEntranceFeeFactor(uint256)"(
      _entranceFeeFactor: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setNotPublic(
      _notPublic: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setNotPublic(bool)"(
      _notPublic: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setOperator(
      _operator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setOperator(address)"(
      _operator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setStrategist(
      _strategist: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setStrategist(address)"(
      _strategist: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setTimelock(
      _timelock: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setTimelock(address)"(
      _timelock: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setToken0ToEarnedPath(
      _path: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setToken0ToEarnedPath(address[])"(
      _path: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setToken1ToEarnedPath(
      _path: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setToken1ToEarnedPath(address[])"(
      _path: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    sharesTotal(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "sharesTotal()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    strategist(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "strategist()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    timelock(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "timelock()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    token0Address(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "token0Address()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    token0ToEarnedPath(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "token0ToEarnedPath(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    token1Address(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "token1Address()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    token1ToEarnedPath(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "token1ToEarnedPath(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    uniExchangeRate(
      _tokenAmount: BigNumberish,
      _path: string[],
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "uniExchangeRate(uint256,address[])"(
      _tokenAmount: BigNumberish,
      _path: string[],
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    uniRouterAddress(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "uniRouterAddress()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    unpause(overrides?: Overrides): Promise<ContractTransaction>;

    "unpause()"(overrides?: Overrides): Promise<ContractTransaction>;

    wantAddress(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "wantAddress()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    wantLockedTotal(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "wantLockedTotal()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    wbnbAddress(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "wbnbAddress()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    withdraw(
      arg0: string,
      _wantAmt: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(address,uint256)"(
      arg0: string,
      _wantAmt: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  busdAddress(overrides?: CallOverrides): Promise<string>;

  "busdAddress()"(overrides?: CallOverrides): Promise<string>;

  buyBackAddress1(overrides?: CallOverrides): Promise<string>;

  "buyBackAddress1()"(overrides?: CallOverrides): Promise<string>;

  buyBackAddress2(overrides?: CallOverrides): Promise<string>;

  "buyBackAddress2()"(overrides?: CallOverrides): Promise<string>;

  buyBackRate1(overrides?: CallOverrides): Promise<BigNumber>;

  "buyBackRate1()"(overrides?: CallOverrides): Promise<BigNumber>;

  buyBackRate2(overrides?: CallOverrides): Promise<BigNumber>;

  "buyBackRate2()"(overrides?: CallOverrides): Promise<BigNumber>;

  buyBackRateMax(overrides?: CallOverrides): Promise<BigNumber>;

  "buyBackRateMax()"(overrides?: CallOverrides): Promise<BigNumber>;

  buyBackRateUL(overrides?: CallOverrides): Promise<BigNumber>;

  "buyBackRateUL()"(overrides?: CallOverrides): Promise<BigNumber>;

  buyBackToken1(overrides?: CallOverrides): Promise<string>;

  "buyBackToken1()"(overrides?: CallOverrides): Promise<string>;

  buyBackToken2(overrides?: CallOverrides): Promise<string>;

  "buyBackToken2()"(overrides?: CallOverrides): Promise<string>;

  controllerFee(overrides?: CallOverrides): Promise<BigNumber>;

  "controllerFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  controllerFeeMax(overrides?: CallOverrides): Promise<BigNumber>;

  "controllerFeeMax()"(overrides?: CallOverrides): Promise<BigNumber>;

  controllerFeeUL(overrides?: CallOverrides): Promise<BigNumber>;

  "controllerFeeUL()"(overrides?: CallOverrides): Promise<BigNumber>;

  convertDustToEarned(overrides?: Overrides): Promise<ContractTransaction>;

  "convertDustToEarned()"(overrides?: Overrides): Promise<ContractTransaction>;

  deposit(
    arg0: string,
    _wantAmt: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deposit(address,uint256)"(
    arg0: string,
    _wantAmt: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  earn(overrides?: Overrides): Promise<ContractTransaction>;

  "earn()"(overrides?: Overrides): Promise<ContractTransaction>;

  earnedAddress(overrides?: CallOverrides): Promise<string>;

  "earnedAddress()"(overrides?: CallOverrides): Promise<string>;

  earnedToBusdPath(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "earnedToBusdPath(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  earnedToBuyBackToken1Path(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "earnedToBuyBackToken1Path(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  earnedToBuyBackToken2Path(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "earnedToBuyBackToken2Path(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  earnedToToken0Path(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "earnedToToken0Path(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  earnedToToken1Path(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "earnedToToken1Path(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  entranceFeeFactor(overrides?: CallOverrides): Promise<BigNumber>;

  "entranceFeeFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

  entranceFeeFactorLL(overrides?: CallOverrides): Promise<BigNumber>;

  "entranceFeeFactorLL()"(overrides?: CallOverrides): Promise<BigNumber>;

  entranceFeeFactorMax(overrides?: CallOverrides): Promise<BigNumber>;

  "entranceFeeFactorMax()"(overrides?: CallOverrides): Promise<BigNumber>;

  executeTransaction(
    target: string,
    value: BigNumberish,
    signature: string,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "executeTransaction(address,uint256,string,bytes)"(
    target: string,
    value: BigNumberish,
    signature: string,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  farm(overrides?: Overrides): Promise<ContractTransaction>;

  "farm()"(overrides?: Overrides): Promise<ContractTransaction>;

  farmContractAddress(overrides?: CallOverrides): Promise<string>;

  "farmContractAddress()"(overrides?: CallOverrides): Promise<string>;

  inCaseTokensGetStuck(
    _token: string,
    _amount: BigNumberish,
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "inCaseTokensGetStuck(address,uint256,address)"(
    _token: string,
    _amount: BigNumberish,
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isAuthorised(_account: string, overrides?: CallOverrides): Promise<boolean>;

  "isAuthorised(address)"(
    _account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isAutoComp(overrides?: CallOverrides): Promise<boolean>;

  "isAutoComp()"(overrides?: CallOverrides): Promise<boolean>;

  isCAKEStaking(overrides?: CallOverrides): Promise<boolean>;

  "isCAKEStaking()"(overrides?: CallOverrides): Promise<boolean>;

  lastEarnBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "lastEarnBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  notPublic(overrides?: CallOverrides): Promise<boolean>;

  "notPublic()"(overrides?: CallOverrides): Promise<boolean>;

  operator(overrides?: CallOverrides): Promise<string>;

  "operator()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pause(overrides?: Overrides): Promise<ContractTransaction>;

  "pause()"(overrides?: Overrides): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  pendingHarvest(overrides?: CallOverrides): Promise<BigNumber>;

  "pendingHarvest()"(overrides?: CallOverrides): Promise<BigNumber>;

  pendingHarvestDollarValue(overrides?: CallOverrides): Promise<BigNumber>;

  "pendingHarvestDollarValue()"(overrides?: CallOverrides): Promise<BigNumber>;

  pid(overrides?: CallOverrides): Promise<BigNumber>;

  "pid()"(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  setBuyBackAddress1(
    _buyBackAddress1: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setBuyBackAddress1(address)"(
    _buyBackAddress1: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setBuyBackAddress2(
    _buyBackAddress2: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setBuyBackAddress2(address)"(
    _buyBackAddress2: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setBuyBackRate1(
    _buyBackRate1: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setBuyBackRate1(uint256)"(
    _buyBackRate1: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setBuyBackRate2(
    _buyBackRate2: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setBuyBackRate2(uint256)"(
    _buyBackRate2: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setControllerFee(
    _controllerFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setControllerFee(uint256)"(
    _controllerFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setEarnedToBusdPath(
    _path: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setEarnedToBusdPath(address[])"(
    _path: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setEarnedToBuyBackToken1Path(
    _path: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setEarnedToBuyBackToken1Path(address[])"(
    _path: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setEarnedToBuyBackToken2Path(
    _path: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setEarnedToBuyBackToken2Path(address[])"(
    _path: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setEarnedToToken0Path(
    _path: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setEarnedToToken0Path(address[])"(
    _path: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setEarnedToToken1Path(
    _path: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setEarnedToToken1Path(address[])"(
    _path: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setEntranceFeeFactor(
    _entranceFeeFactor: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setEntranceFeeFactor(uint256)"(
    _entranceFeeFactor: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setNotPublic(
    _notPublic: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setNotPublic(bool)"(
    _notPublic: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setOperator(
    _operator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setOperator(address)"(
    _operator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setStrategist(
    _strategist: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setStrategist(address)"(
    _strategist: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setTimelock(
    _timelock: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setTimelock(address)"(
    _timelock: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setToken0ToEarnedPath(
    _path: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setToken0ToEarnedPath(address[])"(
    _path: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setToken1ToEarnedPath(
    _path: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setToken1ToEarnedPath(address[])"(
    _path: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  sharesTotal(overrides?: CallOverrides): Promise<BigNumber>;

  "sharesTotal()"(overrides?: CallOverrides): Promise<BigNumber>;

  strategist(overrides?: CallOverrides): Promise<string>;

  "strategist()"(overrides?: CallOverrides): Promise<string>;

  timelock(overrides?: CallOverrides): Promise<string>;

  "timelock()"(overrides?: CallOverrides): Promise<string>;

  token0Address(overrides?: CallOverrides): Promise<string>;

  "token0Address()"(overrides?: CallOverrides): Promise<string>;

  token0ToEarnedPath(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "token0ToEarnedPath(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  token1Address(overrides?: CallOverrides): Promise<string>;

  "token1Address()"(overrides?: CallOverrides): Promise<string>;

  token1ToEarnedPath(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "token1ToEarnedPath(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  uniExchangeRate(
    _tokenAmount: BigNumberish,
    _path: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "uniExchangeRate(uint256,address[])"(
    _tokenAmount: BigNumberish,
    _path: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  uniRouterAddress(overrides?: CallOverrides): Promise<string>;

  "uniRouterAddress()"(overrides?: CallOverrides): Promise<string>;

  unpause(overrides?: Overrides): Promise<ContractTransaction>;

  "unpause()"(overrides?: Overrides): Promise<ContractTransaction>;

  wantAddress(overrides?: CallOverrides): Promise<string>;

  "wantAddress()"(overrides?: CallOverrides): Promise<string>;

  wantLockedTotal(overrides?: CallOverrides): Promise<BigNumber>;

  "wantLockedTotal()"(overrides?: CallOverrides): Promise<BigNumber>;

  wbnbAddress(overrides?: CallOverrides): Promise<string>;

  "wbnbAddress()"(overrides?: CallOverrides): Promise<string>;

  withdraw(
    arg0: string,
    _wantAmt: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(address,uint256)"(
    arg0: string,
    _wantAmt: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    busdAddress(overrides?: CallOverrides): Promise<string>;

    "busdAddress()"(overrides?: CallOverrides): Promise<string>;

    buyBackAddress1(overrides?: CallOverrides): Promise<string>;

    "buyBackAddress1()"(overrides?: CallOverrides): Promise<string>;

    buyBackAddress2(overrides?: CallOverrides): Promise<string>;

    "buyBackAddress2()"(overrides?: CallOverrides): Promise<string>;

    buyBackRate1(overrides?: CallOverrides): Promise<BigNumber>;

    "buyBackRate1()"(overrides?: CallOverrides): Promise<BigNumber>;

    buyBackRate2(overrides?: CallOverrides): Promise<BigNumber>;

    "buyBackRate2()"(overrides?: CallOverrides): Promise<BigNumber>;

    buyBackRateMax(overrides?: CallOverrides): Promise<BigNumber>;

    "buyBackRateMax()"(overrides?: CallOverrides): Promise<BigNumber>;

    buyBackRateUL(overrides?: CallOverrides): Promise<BigNumber>;

    "buyBackRateUL()"(overrides?: CallOverrides): Promise<BigNumber>;

    buyBackToken1(overrides?: CallOverrides): Promise<string>;

    "buyBackToken1()"(overrides?: CallOverrides): Promise<string>;

    buyBackToken2(overrides?: CallOverrides): Promise<string>;

    "buyBackToken2()"(overrides?: CallOverrides): Promise<string>;

    controllerFee(overrides?: CallOverrides): Promise<BigNumber>;

    "controllerFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    controllerFeeMax(overrides?: CallOverrides): Promise<BigNumber>;

    "controllerFeeMax()"(overrides?: CallOverrides): Promise<BigNumber>;

    controllerFeeUL(overrides?: CallOverrides): Promise<BigNumber>;

    "controllerFeeUL()"(overrides?: CallOverrides): Promise<BigNumber>;

    convertDustToEarned(overrides?: CallOverrides): Promise<void>;

    "convertDustToEarned()"(overrides?: CallOverrides): Promise<void>;

    deposit(
      arg0: string,
      _wantAmt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "deposit(address,uint256)"(
      arg0: string,
      _wantAmt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    earn(overrides?: CallOverrides): Promise<void>;

    "earn()"(overrides?: CallOverrides): Promise<void>;

    earnedAddress(overrides?: CallOverrides): Promise<string>;

    "earnedAddress()"(overrides?: CallOverrides): Promise<string>;

    earnedToBusdPath(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "earnedToBusdPath(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    earnedToBuyBackToken1Path(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "earnedToBuyBackToken1Path(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    earnedToBuyBackToken2Path(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "earnedToBuyBackToken2Path(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    earnedToToken0Path(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "earnedToToken0Path(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    earnedToToken1Path(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "earnedToToken1Path(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    entranceFeeFactor(overrides?: CallOverrides): Promise<BigNumber>;

    "entranceFeeFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

    entranceFeeFactorLL(overrides?: CallOverrides): Promise<BigNumber>;

    "entranceFeeFactorLL()"(overrides?: CallOverrides): Promise<BigNumber>;

    entranceFeeFactorMax(overrides?: CallOverrides): Promise<BigNumber>;

    "entranceFeeFactorMax()"(overrides?: CallOverrides): Promise<BigNumber>;

    executeTransaction(
      target: string,
      value: BigNumberish,
      signature: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "executeTransaction(address,uint256,string,bytes)"(
      target: string,
      value: BigNumberish,
      signature: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    farm(overrides?: CallOverrides): Promise<void>;

    "farm()"(overrides?: CallOverrides): Promise<void>;

    farmContractAddress(overrides?: CallOverrides): Promise<string>;

    "farmContractAddress()"(overrides?: CallOverrides): Promise<string>;

    inCaseTokensGetStuck(
      _token: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "inCaseTokensGetStuck(address,uint256,address)"(
      _token: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isAuthorised(_account: string, overrides?: CallOverrides): Promise<boolean>;

    "isAuthorised(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isAutoComp(overrides?: CallOverrides): Promise<boolean>;

    "isAutoComp()"(overrides?: CallOverrides): Promise<boolean>;

    isCAKEStaking(overrides?: CallOverrides): Promise<boolean>;

    "isCAKEStaking()"(overrides?: CallOverrides): Promise<boolean>;

    lastEarnBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "lastEarnBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    notPublic(overrides?: CallOverrides): Promise<boolean>;

    "notPublic()"(overrides?: CallOverrides): Promise<boolean>;

    operator(overrides?: CallOverrides): Promise<string>;

    "operator()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    "pause()"(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    pendingHarvest(overrides?: CallOverrides): Promise<BigNumber>;

    "pendingHarvest()"(overrides?: CallOverrides): Promise<BigNumber>;

    pendingHarvestDollarValue(overrides?: CallOverrides): Promise<BigNumber>;

    "pendingHarvestDollarValue()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pid(overrides?: CallOverrides): Promise<BigNumber>;

    "pid()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setBuyBackAddress1(
      _buyBackAddress1: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setBuyBackAddress1(address)"(
      _buyBackAddress1: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setBuyBackAddress2(
      _buyBackAddress2: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setBuyBackAddress2(address)"(
      _buyBackAddress2: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setBuyBackRate1(
      _buyBackRate1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setBuyBackRate1(uint256)"(
      _buyBackRate1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setBuyBackRate2(
      _buyBackRate2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setBuyBackRate2(uint256)"(
      _buyBackRate2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setControllerFee(
      _controllerFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setControllerFee(uint256)"(
      _controllerFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setEarnedToBusdPath(
      _path: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setEarnedToBusdPath(address[])"(
      _path: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    setEarnedToBuyBackToken1Path(
      _path: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setEarnedToBuyBackToken1Path(address[])"(
      _path: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    setEarnedToBuyBackToken2Path(
      _path: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setEarnedToBuyBackToken2Path(address[])"(
      _path: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    setEarnedToToken0Path(
      _path: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setEarnedToToken0Path(address[])"(
      _path: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    setEarnedToToken1Path(
      _path: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setEarnedToToken1Path(address[])"(
      _path: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    setEntranceFeeFactor(
      _entranceFeeFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setEntranceFeeFactor(uint256)"(
      _entranceFeeFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setNotPublic(_notPublic: boolean, overrides?: CallOverrides): Promise<void>;

    "setNotPublic(bool)"(
      _notPublic: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setOperator(_operator: string, overrides?: CallOverrides): Promise<void>;

    "setOperator(address)"(
      _operator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setStrategist(
      _strategist: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setStrategist(address)"(
      _strategist: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTimelock(_timelock: string, overrides?: CallOverrides): Promise<void>;

    "setTimelock(address)"(
      _timelock: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setToken0ToEarnedPath(
      _path: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setToken0ToEarnedPath(address[])"(
      _path: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    setToken1ToEarnedPath(
      _path: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setToken1ToEarnedPath(address[])"(
      _path: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    sharesTotal(overrides?: CallOverrides): Promise<BigNumber>;

    "sharesTotal()"(overrides?: CallOverrides): Promise<BigNumber>;

    strategist(overrides?: CallOverrides): Promise<string>;

    "strategist()"(overrides?: CallOverrides): Promise<string>;

    timelock(overrides?: CallOverrides): Promise<string>;

    "timelock()"(overrides?: CallOverrides): Promise<string>;

    token0Address(overrides?: CallOverrides): Promise<string>;

    "token0Address()"(overrides?: CallOverrides): Promise<string>;

    token0ToEarnedPath(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "token0ToEarnedPath(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    token1Address(overrides?: CallOverrides): Promise<string>;

    "token1Address()"(overrides?: CallOverrides): Promise<string>;

    token1ToEarnedPath(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "token1ToEarnedPath(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    uniExchangeRate(
      _tokenAmount: BigNumberish,
      _path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "uniExchangeRate(uint256,address[])"(
      _tokenAmount: BigNumberish,
      _path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uniRouterAddress(overrides?: CallOverrides): Promise<string>;

    "uniRouterAddress()"(overrides?: CallOverrides): Promise<string>;

    unpause(overrides?: CallOverrides): Promise<void>;

    "unpause()"(overrides?: CallOverrides): Promise<void>;

    wantAddress(overrides?: CallOverrides): Promise<string>;

    "wantAddress()"(overrides?: CallOverrides): Promise<string>;

    wantLockedTotal(overrides?: CallOverrides): Promise<BigNumber>;

    "wantLockedTotal()"(overrides?: CallOverrides): Promise<BigNumber>;

    wbnbAddress(overrides?: CallOverrides): Promise<string>;

    "wbnbAddress()"(overrides?: CallOverrides): Promise<string>;

    withdraw(
      arg0: string,
      _wantAmt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "withdraw(address,uint256)"(
      arg0: string,
      _wantAmt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    BuyBack(
      earnedAddress: null,
      buyBackToken: null,
      earnedAmt: null,
      buyBackAmt: null,
      receiver: null
    ): EventFilter;

    Compound(
      token0Address: null,
      token0Amt: null,
      token1Address: null,
      token1Amt: null
    ): EventFilter;

    ConvertDustToEarned(
      tokenAddress: null,
      earnedAddress: null,
      tokenAmt: null
    ): EventFilter;

    Deposit(amount: null): EventFilter;

    DistributeFee(earnedAddress: null, fee: null, receiver: null): EventFilter;

    Earned(earnedAddress: null, earnedAmt: null): EventFilter;

    ExecuteTransaction(
      target: string | null,
      value: null,
      signature: null,
      data: null
    ): EventFilter;

    Farm(amount: null): EventFilter;

    InCaseTokensGetStuck(
      tokenAddress: null,
      tokenAmt: null,
      receiver: null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    Paused(account: null): EventFilter;

    Unpaused(account: null): EventFilter;

    Withdraw(amount: null): EventFilter;
  };

  estimateGas: {
    busdAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "busdAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    buyBackAddress1(overrides?: CallOverrides): Promise<BigNumber>;

    "buyBackAddress1()"(overrides?: CallOverrides): Promise<BigNumber>;

    buyBackAddress2(overrides?: CallOverrides): Promise<BigNumber>;

    "buyBackAddress2()"(overrides?: CallOverrides): Promise<BigNumber>;

    buyBackRate1(overrides?: CallOverrides): Promise<BigNumber>;

    "buyBackRate1()"(overrides?: CallOverrides): Promise<BigNumber>;

    buyBackRate2(overrides?: CallOverrides): Promise<BigNumber>;

    "buyBackRate2()"(overrides?: CallOverrides): Promise<BigNumber>;

    buyBackRateMax(overrides?: CallOverrides): Promise<BigNumber>;

    "buyBackRateMax()"(overrides?: CallOverrides): Promise<BigNumber>;

    buyBackRateUL(overrides?: CallOverrides): Promise<BigNumber>;

    "buyBackRateUL()"(overrides?: CallOverrides): Promise<BigNumber>;

    buyBackToken1(overrides?: CallOverrides): Promise<BigNumber>;

    "buyBackToken1()"(overrides?: CallOverrides): Promise<BigNumber>;

    buyBackToken2(overrides?: CallOverrides): Promise<BigNumber>;

    "buyBackToken2()"(overrides?: CallOverrides): Promise<BigNumber>;

    controllerFee(overrides?: CallOverrides): Promise<BigNumber>;

    "controllerFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    controllerFeeMax(overrides?: CallOverrides): Promise<BigNumber>;

    "controllerFeeMax()"(overrides?: CallOverrides): Promise<BigNumber>;

    controllerFeeUL(overrides?: CallOverrides): Promise<BigNumber>;

    "controllerFeeUL()"(overrides?: CallOverrides): Promise<BigNumber>;

    convertDustToEarned(overrides?: Overrides): Promise<BigNumber>;

    "convertDustToEarned()"(overrides?: Overrides): Promise<BigNumber>;

    deposit(
      arg0: string,
      _wantAmt: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deposit(address,uint256)"(
      arg0: string,
      _wantAmt: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    earn(overrides?: Overrides): Promise<BigNumber>;

    "earn()"(overrides?: Overrides): Promise<BigNumber>;

    earnedAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "earnedAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    earnedToBusdPath(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "earnedToBusdPath(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    earnedToBuyBackToken1Path(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "earnedToBuyBackToken1Path(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    earnedToBuyBackToken2Path(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "earnedToBuyBackToken2Path(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    earnedToToken0Path(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "earnedToToken0Path(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    earnedToToken1Path(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "earnedToToken1Path(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    entranceFeeFactor(overrides?: CallOverrides): Promise<BigNumber>;

    "entranceFeeFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

    entranceFeeFactorLL(overrides?: CallOverrides): Promise<BigNumber>;

    "entranceFeeFactorLL()"(overrides?: CallOverrides): Promise<BigNumber>;

    entranceFeeFactorMax(overrides?: CallOverrides): Promise<BigNumber>;

    "entranceFeeFactorMax()"(overrides?: CallOverrides): Promise<BigNumber>;

    executeTransaction(
      target: string,
      value: BigNumberish,
      signature: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "executeTransaction(address,uint256,string,bytes)"(
      target: string,
      value: BigNumberish,
      signature: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    farm(overrides?: Overrides): Promise<BigNumber>;

    "farm()"(overrides?: Overrides): Promise<BigNumber>;

    farmContractAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "farmContractAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    inCaseTokensGetStuck(
      _token: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "inCaseTokensGetStuck(address,uint256,address)"(
      _token: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isAuthorised(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isAuthorised(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAutoComp(overrides?: CallOverrides): Promise<BigNumber>;

    "isAutoComp()"(overrides?: CallOverrides): Promise<BigNumber>;

    isCAKEStaking(overrides?: CallOverrides): Promise<BigNumber>;

    "isCAKEStaking()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastEarnBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "lastEarnBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    notPublic(overrides?: CallOverrides): Promise<BigNumber>;

    "notPublic()"(overrides?: CallOverrides): Promise<BigNumber>;

    operator(overrides?: CallOverrides): Promise<BigNumber>;

    "operator()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides): Promise<BigNumber>;

    "pause()"(overrides?: Overrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    pendingHarvest(overrides?: CallOverrides): Promise<BigNumber>;

    "pendingHarvest()"(overrides?: CallOverrides): Promise<BigNumber>;

    pendingHarvestDollarValue(overrides?: CallOverrides): Promise<BigNumber>;

    "pendingHarvestDollarValue()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pid(overrides?: CallOverrides): Promise<BigNumber>;

    "pid()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    setBuyBackAddress1(
      _buyBackAddress1: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setBuyBackAddress1(address)"(
      _buyBackAddress1: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setBuyBackAddress2(
      _buyBackAddress2: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setBuyBackAddress2(address)"(
      _buyBackAddress2: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setBuyBackRate1(
      _buyBackRate1: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setBuyBackRate1(uint256)"(
      _buyBackRate1: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setBuyBackRate2(
      _buyBackRate2: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setBuyBackRate2(uint256)"(
      _buyBackRate2: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setControllerFee(
      _controllerFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setControllerFee(uint256)"(
      _controllerFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setEarnedToBusdPath(
      _path: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setEarnedToBusdPath(address[])"(
      _path: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    setEarnedToBuyBackToken1Path(
      _path: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setEarnedToBuyBackToken1Path(address[])"(
      _path: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    setEarnedToBuyBackToken2Path(
      _path: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setEarnedToBuyBackToken2Path(address[])"(
      _path: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    setEarnedToToken0Path(
      _path: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setEarnedToToken0Path(address[])"(
      _path: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    setEarnedToToken1Path(
      _path: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setEarnedToToken1Path(address[])"(
      _path: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    setEntranceFeeFactor(
      _entranceFeeFactor: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setEntranceFeeFactor(uint256)"(
      _entranceFeeFactor: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setNotPublic(
      _notPublic: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setNotPublic(bool)"(
      _notPublic: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setOperator(_operator: string, overrides?: Overrides): Promise<BigNumber>;

    "setOperator(address)"(
      _operator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setStrategist(
      _strategist: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setStrategist(address)"(
      _strategist: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setTimelock(_timelock: string, overrides?: Overrides): Promise<BigNumber>;

    "setTimelock(address)"(
      _timelock: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setToken0ToEarnedPath(
      _path: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setToken0ToEarnedPath(address[])"(
      _path: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    setToken1ToEarnedPath(
      _path: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setToken1ToEarnedPath(address[])"(
      _path: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    sharesTotal(overrides?: CallOverrides): Promise<BigNumber>;

    "sharesTotal()"(overrides?: CallOverrides): Promise<BigNumber>;

    strategist(overrides?: CallOverrides): Promise<BigNumber>;

    "strategist()"(overrides?: CallOverrides): Promise<BigNumber>;

    timelock(overrides?: CallOverrides): Promise<BigNumber>;

    "timelock()"(overrides?: CallOverrides): Promise<BigNumber>;

    token0Address(overrides?: CallOverrides): Promise<BigNumber>;

    "token0Address()"(overrides?: CallOverrides): Promise<BigNumber>;

    token0ToEarnedPath(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "token0ToEarnedPath(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    token1Address(overrides?: CallOverrides): Promise<BigNumber>;

    "token1Address()"(overrides?: CallOverrides): Promise<BigNumber>;

    token1ToEarnedPath(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "token1ToEarnedPath(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    uniExchangeRate(
      _tokenAmount: BigNumberish,
      _path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "uniExchangeRate(uint256,address[])"(
      _tokenAmount: BigNumberish,
      _path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uniRouterAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "uniRouterAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(overrides?: Overrides): Promise<BigNumber>;

    "unpause()"(overrides?: Overrides): Promise<BigNumber>;

    wantAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "wantAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    wantLockedTotal(overrides?: CallOverrides): Promise<BigNumber>;

    "wantLockedTotal()"(overrides?: CallOverrides): Promise<BigNumber>;

    wbnbAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "wbnbAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      arg0: string,
      _wantAmt: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdraw(address,uint256)"(
      arg0: string,
      _wantAmt: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    busdAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "busdAddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyBackAddress1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "buyBackAddress1()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyBackAddress2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "buyBackAddress2()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyBackRate1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "buyBackRate1()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyBackRate2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "buyBackRate2()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyBackRateMax(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "buyBackRateMax()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyBackRateUL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "buyBackRateUL()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyBackToken1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "buyBackToken1()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyBackToken2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "buyBackToken2()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    controllerFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "controllerFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    controllerFeeMax(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "controllerFeeMax()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    controllerFeeUL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "controllerFeeUL()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convertDustToEarned(overrides?: Overrides): Promise<PopulatedTransaction>;

    "convertDustToEarned()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deposit(
      arg0: string,
      _wantAmt: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deposit(address,uint256)"(
      arg0: string,
      _wantAmt: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    earn(overrides?: Overrides): Promise<PopulatedTransaction>;

    "earn()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    earnedAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "earnedAddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    earnedToBusdPath(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "earnedToBusdPath(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    earnedToBuyBackToken1Path(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "earnedToBuyBackToken1Path(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    earnedToBuyBackToken2Path(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "earnedToBuyBackToken2Path(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    earnedToToken0Path(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "earnedToToken0Path(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    earnedToToken1Path(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "earnedToToken1Path(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    entranceFeeFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "entranceFeeFactor()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    entranceFeeFactorLL(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "entranceFeeFactorLL()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    entranceFeeFactorMax(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "entranceFeeFactorMax()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeTransaction(
      target: string,
      value: BigNumberish,
      signature: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "executeTransaction(address,uint256,string,bytes)"(
      target: string,
      value: BigNumberish,
      signature: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    farm(overrides?: Overrides): Promise<PopulatedTransaction>;

    "farm()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    farmContractAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "farmContractAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    inCaseTokensGetStuck(
      _token: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "inCaseTokensGetStuck(address,uint256,address)"(
      _token: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isAuthorised(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isAuthorised(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAutoComp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isAutoComp()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isCAKEStaking(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isCAKEStaking()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastEarnBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lastEarnBlock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    notPublic(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "notPublic()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    operator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "operator()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(overrides?: Overrides): Promise<PopulatedTransaction>;

    "pause()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingHarvest(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pendingHarvest()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingHarvestDollarValue(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pendingHarvestDollarValue()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pid()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setBuyBackAddress1(
      _buyBackAddress1: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setBuyBackAddress1(address)"(
      _buyBackAddress1: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setBuyBackAddress2(
      _buyBackAddress2: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setBuyBackAddress2(address)"(
      _buyBackAddress2: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setBuyBackRate1(
      _buyBackRate1: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setBuyBackRate1(uint256)"(
      _buyBackRate1: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setBuyBackRate2(
      _buyBackRate2: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setBuyBackRate2(uint256)"(
      _buyBackRate2: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setControllerFee(
      _controllerFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setControllerFee(uint256)"(
      _controllerFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setEarnedToBusdPath(
      _path: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setEarnedToBusdPath(address[])"(
      _path: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setEarnedToBuyBackToken1Path(
      _path: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setEarnedToBuyBackToken1Path(address[])"(
      _path: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setEarnedToBuyBackToken2Path(
      _path: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setEarnedToBuyBackToken2Path(address[])"(
      _path: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setEarnedToToken0Path(
      _path: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setEarnedToToken0Path(address[])"(
      _path: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setEarnedToToken1Path(
      _path: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setEarnedToToken1Path(address[])"(
      _path: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setEntranceFeeFactor(
      _entranceFeeFactor: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setEntranceFeeFactor(uint256)"(
      _entranceFeeFactor: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setNotPublic(
      _notPublic: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setNotPublic(bool)"(
      _notPublic: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setOperator(
      _operator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setOperator(address)"(
      _operator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setStrategist(
      _strategist: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setStrategist(address)"(
      _strategist: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setTimelock(
      _timelock: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setTimelock(address)"(
      _timelock: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setToken0ToEarnedPath(
      _path: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setToken0ToEarnedPath(address[])"(
      _path: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setToken1ToEarnedPath(
      _path: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setToken1ToEarnedPath(address[])"(
      _path: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    sharesTotal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "sharesTotal()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    strategist(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "strategist()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timelock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "timelock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token0Address(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token0Address()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token0ToEarnedPath(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "token0ToEarnedPath(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token1Address(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token1Address()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token1ToEarnedPath(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "token1ToEarnedPath(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    uniExchangeRate(
      _tokenAmount: BigNumberish,
      _path: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "uniExchangeRate(uint256,address[])"(
      _tokenAmount: BigNumberish,
      _path: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uniRouterAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "uniRouterAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpause(overrides?: Overrides): Promise<PopulatedTransaction>;

    "unpause()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    wantAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "wantAddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wantLockedTotal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "wantLockedTotal()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wbnbAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "wbnbAddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      arg0: string,
      _wantAmt: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(address,uint256)"(
      arg0: string,
      _wantAmt: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
