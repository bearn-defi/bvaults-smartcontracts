/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IStrategyInterface extends ethers.utils.Interface {
  functions: {
    "deposit(address,uint256)": FunctionFragment;
    "earn()": FunctionFragment;
    "inCaseTokensGetStuck(address,uint256,address)": FunctionFragment;
    "sharesTotal()": FunctionFragment;
    "wantLockedTotal()": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "earn", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "inCaseTokensGetStuck",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "sharesTotal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wantLockedTotal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "earn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "inCaseTokensGetStuck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sharesTotal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wantLockedTotal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export class IStrategy extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IStrategyInterface;

  functions: {
    deposit(
      _userAddress: string,
      _wantAmt: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deposit(address,uint256)"(
      _userAddress: string,
      _wantAmt: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    earn(overrides?: Overrides): Promise<ContractTransaction>;

    "earn()"(overrides?: Overrides): Promise<ContractTransaction>;

    inCaseTokensGetStuck(
      _token: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "inCaseTokensGetStuck(address,uint256,address)"(
      _token: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    sharesTotal(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "sharesTotal()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    wantLockedTotal(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "wantLockedTotal()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    withdraw(
      _userAddress: string,
      _wantAmt: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(address,uint256)"(
      _userAddress: string,
      _wantAmt: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  deposit(
    _userAddress: string,
    _wantAmt: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deposit(address,uint256)"(
    _userAddress: string,
    _wantAmt: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  earn(overrides?: Overrides): Promise<ContractTransaction>;

  "earn()"(overrides?: Overrides): Promise<ContractTransaction>;

  inCaseTokensGetStuck(
    _token: string,
    _amount: BigNumberish,
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "inCaseTokensGetStuck(address,uint256,address)"(
    _token: string,
    _amount: BigNumberish,
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  sharesTotal(overrides?: CallOverrides): Promise<BigNumber>;

  "sharesTotal()"(overrides?: CallOverrides): Promise<BigNumber>;

  wantLockedTotal(overrides?: CallOverrides): Promise<BigNumber>;

  "wantLockedTotal()"(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    _userAddress: string,
    _wantAmt: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(address,uint256)"(
    _userAddress: string,
    _wantAmt: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    deposit(
      _userAddress: string,
      _wantAmt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "deposit(address,uint256)"(
      _userAddress: string,
      _wantAmt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    earn(overrides?: CallOverrides): Promise<void>;

    "earn()"(overrides?: CallOverrides): Promise<void>;

    inCaseTokensGetStuck(
      _token: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "inCaseTokensGetStuck(address,uint256,address)"(
      _token: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    sharesTotal(overrides?: CallOverrides): Promise<BigNumber>;

    "sharesTotal()"(overrides?: CallOverrides): Promise<BigNumber>;

    wantLockedTotal(overrides?: CallOverrides): Promise<BigNumber>;

    "wantLockedTotal()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _userAddress: string,
      _wantAmt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "withdraw(address,uint256)"(
      _userAddress: string,
      _wantAmt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    deposit(
      _userAddress: string,
      _wantAmt: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deposit(address,uint256)"(
      _userAddress: string,
      _wantAmt: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    earn(overrides?: Overrides): Promise<BigNumber>;

    "earn()"(overrides?: Overrides): Promise<BigNumber>;

    inCaseTokensGetStuck(
      _token: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "inCaseTokensGetStuck(address,uint256,address)"(
      _token: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    sharesTotal(overrides?: CallOverrides): Promise<BigNumber>;

    "sharesTotal()"(overrides?: CallOverrides): Promise<BigNumber>;

    wantLockedTotal(overrides?: CallOverrides): Promise<BigNumber>;

    "wantLockedTotal()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _userAddress: string,
      _wantAmt: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdraw(address,uint256)"(
      _userAddress: string,
      _wantAmt: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deposit(
      _userAddress: string,
      _wantAmt: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deposit(address,uint256)"(
      _userAddress: string,
      _wantAmt: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    earn(overrides?: Overrides): Promise<PopulatedTransaction>;

    "earn()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    inCaseTokensGetStuck(
      _token: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "inCaseTokensGetStuck(address,uint256,address)"(
      _token: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    sharesTotal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "sharesTotal()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wantLockedTotal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "wantLockedTotal()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _userAddress: string,
      _wantAmt: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(address,uint256)"(
      _userAddress: string,
      _wantAmt: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
