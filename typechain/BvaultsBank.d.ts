/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface BvaultsBankInterface extends ethers.utils.Interface {
  functions: {
    "add(uint256,address,bool,address)": FunctionFragment;
    "addRewardPool(address,uint256)": FunctionFragment;
    "deposit(uint256,uint256)": FunctionFragment;
    "emergencyWithdraw(uint256)": FunctionFragment;
    "executeTransaction(address,uint256,string,bytes)": FunctionFragment;
    "getMultiplier(uint256,uint256)": FunctionFragment;
    "inCaseTokensGetStuck(address,uint256,address)": FunctionFragment;
    "initialize(uint256,address,uint256,address,uint256)": FunctionFragment;
    "initialized()": FunctionFragment;
    "massUpdatePools()": FunctionFragment;
    "operator()": FunctionFragment;
    "pendingReward(uint256,uint256,address)": FunctionFragment;
    "poolInfo(uint256)": FunctionFragment;
    "poolLength()": FunctionFragment;
    "rewardPoolInfo(uint256)": FunctionFragment;
    "rewardPoolLength()": FunctionFragment;
    "set(uint256,uint256)": FunctionFragment;
    "setTimelock(address)": FunctionFragment;
    "setUnstakingFrozenTime(uint256)": FunctionFragment;
    "stakedWantTokens(uint256,address)": FunctionFragment;
    "startBlock()": FunctionFragment;
    "timelock()": FunctionFragment;
    "totalAllocPoint()": FunctionFragment;
    "unfrozenStakeTime(uint256,address)": FunctionFragment;
    "unstakingFrozenTime()": FunctionFragment;
    "updatePool(uint256)": FunctionFragment;
    "updateRewardPerBlock(uint256,uint256)": FunctionFragment;
    "userInfo(uint256,address)": FunctionFragment;
    "withdraw(uint256,uint256)": FunctionFragment;
    "withdrawAll(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "add",
    values: [BigNumberish, string, boolean, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addRewardPool",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeTransaction",
    values: [string, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMultiplier",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "inCaseTokensGetStuck",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BigNumberish, string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "massUpdatePools",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "operator", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingReward",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "poolInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPoolInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPoolLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "set",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setTimelock", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setUnstakingFrozenTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakedWantTokens",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "startBlock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "timelock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalAllocPoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unfrozenStakeTime",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakingFrozenTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updatePool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRewardPerBlock",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userInfo",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addRewardPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inCaseTokensGetStuck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "massUpdatePools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "operator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolLength", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardPoolInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPoolLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "set", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTimelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUnstakingFrozenTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakedWantTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startBlock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "timelock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAllocPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unfrozenStakeTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unstakingFrozenTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updatePool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateRewardPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;

  events: {
    "Deposit(address,uint256,uint256)": EventFragment;
    "EmergencyWithdraw(address,uint256,uint256)": EventFragment;
    "ExecuteTransaction(address,uint256,string,bytes)": EventFragment;
    "Initialized(address,uint256)": EventFragment;
    "RewardPaid(uint256,address,address,uint256)": EventFragment;
    "Withdraw(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecuteTransaction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export class BvaultsBank extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: BvaultsBankInterface;

  functions: {
    add(
      _allocPoint: BigNumberish,
      _want: string,
      _withUpdate: boolean,
      _strategy: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "add(uint256,address,bool,address)"(
      _allocPoint: BigNumberish,
      _want: string,
      _withUpdate: boolean,
      _strategy: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addRewardPool(
      _rewardToken: string,
      _rewardPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addRewardPool(address,uint256)"(
      _rewardToken: string,
      _rewardPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deposit(
      _pid: BigNumberish,
      _wantAmt: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deposit(uint256,uint256)"(
      _pid: BigNumberish,
      _wantAmt: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "emergencyWithdraw(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    executeTransaction(
      target: string,
      value: BigNumberish,
      signature: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "executeTransaction(address,uint256,string,bytes)"(
      target: string,
      value: BigNumberish,
      signature: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getMultiplier(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getMultiplier(uint256,uint256)"(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    inCaseTokensGetStuck(
      _token: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "inCaseTokensGetStuck(address,uint256,address)"(
      _token: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initialize(
      _startBlock: BigNumberish,
      _bfi: string,
      _bfiRewardRate: BigNumberish,
      _bdo: string,
      _bdoRewardRate: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(uint256,address,uint256,address,uint256)"(
      _startBlock: BigNumberish,
      _bfi: string,
      _bfiRewardRate: BigNumberish,
      _bdo: string,
      _bdoRewardRate: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initialized(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "initialized()"(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    massUpdatePools(overrides?: Overrides): Promise<ContractTransaction>;

    "massUpdatePools()"(overrides?: Overrides): Promise<ContractTransaction>;

    operator(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "operator()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    pendingReward(
      _pid: BigNumberish,
      _rewardPid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "pendingReward(uint256,uint256,address)"(
      _pid: BigNumberish,
      _rewardPid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      want: string;
      allocPoint: BigNumber;
      lastRewardBlock: BigNumber;
      strategy: string;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: string;
    }>;

    "poolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      want: string;
      allocPoint: BigNumber;
      lastRewardBlock: BigNumber;
      strategy: string;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: string;
    }>;

    poolLength(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "poolLength()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    rewardPoolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      rewardToken: string;
      rewardPerBlock: BigNumber;
      totalPaidRewards: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
    }>;

    "rewardPoolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      rewardToken: string;
      rewardPerBlock: BigNumber;
      totalPaidRewards: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
    }>;

    rewardPoolLength(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "rewardPoolLength()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "set(uint256,uint256)"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setTimelock(
      _timelock: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setTimelock(address)"(
      _timelock: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setUnstakingFrozenTime(
      _unstakingFrozenTime: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setUnstakingFrozenTime(uint256)"(
      _unstakingFrozenTime: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stakedWantTokens(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "stakedWantTokens(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    startBlock(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "startBlock()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    timelock(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "timelock()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    totalAllocPoint(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "totalAllocPoint()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    unfrozenStakeTime(
      _pid: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "unfrozenStakeTime(uint256,address)"(
      _pid: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    unstakingFrozenTime(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "unstakingFrozenTime()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    updatePool(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updatePool(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateRewardPerBlock(
      _rewardPid: BigNumberish,
      _rewardPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateRewardPerBlock(uint256,uint256)"(
      _rewardPid: BigNumberish,
      _rewardPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      shares: BigNumber;
      lastStakeTime: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "userInfo(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      shares: BigNumber;
      lastStakeTime: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    withdraw(
      _pid: BigNumberish,
      _wantAmt: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(uint256,uint256)"(
      _pid: BigNumberish,
      _wantAmt: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawAll(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawAll(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  add(
    _allocPoint: BigNumberish,
    _want: string,
    _withUpdate: boolean,
    _strategy: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "add(uint256,address,bool,address)"(
    _allocPoint: BigNumberish,
    _want: string,
    _withUpdate: boolean,
    _strategy: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addRewardPool(
    _rewardToken: string,
    _rewardPerBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addRewardPool(address,uint256)"(
    _rewardToken: string,
    _rewardPerBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deposit(
    _pid: BigNumberish,
    _wantAmt: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deposit(uint256,uint256)"(
    _pid: BigNumberish,
    _wantAmt: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  emergencyWithdraw(
    _pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "emergencyWithdraw(uint256)"(
    _pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  executeTransaction(
    target: string,
    value: BigNumberish,
    signature: string,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "executeTransaction(address,uint256,string,bytes)"(
    target: string,
    value: BigNumberish,
    signature: string,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getMultiplier(
    _from: BigNumberish,
    _to: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getMultiplier(uint256,uint256)"(
    _from: BigNumberish,
    _to: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  inCaseTokensGetStuck(
    _token: string,
    _amount: BigNumberish,
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "inCaseTokensGetStuck(address,uint256,address)"(
    _token: string,
    _amount: BigNumberish,
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initialize(
    _startBlock: BigNumberish,
    _bfi: string,
    _bfiRewardRate: BigNumberish,
    _bdo: string,
    _bdoRewardRate: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(uint256,address,uint256,address,uint256)"(
    _startBlock: BigNumberish,
    _bfi: string,
    _bfiRewardRate: BigNumberish,
    _bdo: string,
    _bdoRewardRate: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initialized(overrides?: CallOverrides): Promise<boolean>;

  "initialized()"(overrides?: CallOverrides): Promise<boolean>;

  massUpdatePools(overrides?: Overrides): Promise<ContractTransaction>;

  "massUpdatePools()"(overrides?: Overrides): Promise<ContractTransaction>;

  operator(overrides?: CallOverrides): Promise<string>;

  "operator()"(overrides?: CallOverrides): Promise<string>;

  pendingReward(
    _pid: BigNumberish,
    _rewardPid: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "pendingReward(uint256,uint256,address)"(
    _pid: BigNumberish,
    _rewardPid: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolInfo(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    want: string;
    allocPoint: BigNumber;
    lastRewardBlock: BigNumber;
    strategy: string;
    0: string;
    1: BigNumber;
    2: BigNumber;
    3: string;
  }>;

  "poolInfo(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    want: string;
    allocPoint: BigNumber;
    lastRewardBlock: BigNumber;
    strategy: string;
    0: string;
    1: BigNumber;
    2: BigNumber;
    3: string;
  }>;

  poolLength(overrides?: CallOverrides): Promise<BigNumber>;

  "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  rewardPoolInfo(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    rewardToken: string;
    rewardPerBlock: BigNumber;
    totalPaidRewards: BigNumber;
    0: string;
    1: BigNumber;
    2: BigNumber;
  }>;

  "rewardPoolInfo(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    rewardToken: string;
    rewardPerBlock: BigNumber;
    totalPaidRewards: BigNumber;
    0: string;
    1: BigNumber;
    2: BigNumber;
  }>;

  rewardPoolLength(overrides?: CallOverrides): Promise<BigNumber>;

  "rewardPoolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  set(
    _pid: BigNumberish,
    _allocPoint: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "set(uint256,uint256)"(
    _pid: BigNumberish,
    _allocPoint: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setTimelock(
    _timelock: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setTimelock(address)"(
    _timelock: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setUnstakingFrozenTime(
    _unstakingFrozenTime: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setUnstakingFrozenTime(uint256)"(
    _unstakingFrozenTime: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stakedWantTokens(
    _pid: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "stakedWantTokens(uint256,address)"(
    _pid: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  startBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "startBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  timelock(overrides?: CallOverrides): Promise<string>;

  "timelock()"(overrides?: CallOverrides): Promise<string>;

  totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

  "totalAllocPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

  unfrozenStakeTime(
    _pid: BigNumberish,
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "unfrozenStakeTime(uint256,address)"(
    _pid: BigNumberish,
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  unstakingFrozenTime(overrides?: CallOverrides): Promise<BigNumber>;

  "unstakingFrozenTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  updatePool(
    _pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updatePool(uint256)"(
    _pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateRewardPerBlock(
    _rewardPid: BigNumberish,
    _rewardPerBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateRewardPerBlock(uint256,uint256)"(
    _rewardPid: BigNumberish,
    _rewardPerBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  userInfo(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<{
    shares: BigNumber;
    lastStakeTime: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "userInfo(uint256,address)"(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<{
    shares: BigNumber;
    lastStakeTime: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  withdraw(
    _pid: BigNumberish,
    _wantAmt: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(uint256,uint256)"(
    _pid: BigNumberish,
    _wantAmt: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawAll(
    _pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawAll(uint256)"(
    _pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    add(
      _allocPoint: BigNumberish,
      _want: string,
      _withUpdate: boolean,
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "add(uint256,address,bool,address)"(
      _allocPoint: BigNumberish,
      _want: string,
      _withUpdate: boolean,
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addRewardPool(
      _rewardToken: string,
      _rewardPerBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addRewardPool(address,uint256)"(
      _rewardToken: string,
      _rewardPerBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      _pid: BigNumberish,
      _wantAmt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(uint256,uint256)"(
      _pid: BigNumberish,
      _wantAmt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "emergencyWithdraw(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    executeTransaction(
      target: string,
      value: BigNumberish,
      signature: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "executeTransaction(address,uint256,string,bytes)"(
      target: string,
      value: BigNumberish,
      signature: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getMultiplier(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMultiplier(uint256,uint256)"(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    inCaseTokensGetStuck(
      _token: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "inCaseTokensGetStuck(address,uint256,address)"(
      _token: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _startBlock: BigNumberish,
      _bfi: string,
      _bfiRewardRate: BigNumberish,
      _bdo: string,
      _bdoRewardRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(uint256,address,uint256,address,uint256)"(
      _startBlock: BigNumberish,
      _bfi: string,
      _bfiRewardRate: BigNumberish,
      _bdo: string,
      _bdoRewardRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initialized(overrides?: CallOverrides): Promise<boolean>;

    "initialized()"(overrides?: CallOverrides): Promise<boolean>;

    massUpdatePools(overrides?: CallOverrides): Promise<void>;

    "massUpdatePools()"(overrides?: CallOverrides): Promise<void>;

    operator(overrides?: CallOverrides): Promise<string>;

    "operator()"(overrides?: CallOverrides): Promise<string>;

    pendingReward(
      _pid: BigNumberish,
      _rewardPid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingReward(uint256,uint256,address)"(
      _pid: BigNumberish,
      _rewardPid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      want: string;
      allocPoint: BigNumber;
      lastRewardBlock: BigNumber;
      strategy: string;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: string;
    }>;

    "poolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      want: string;
      allocPoint: BigNumber;
      lastRewardBlock: BigNumber;
      strategy: string;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: string;
    }>;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPoolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      rewardToken: string;
      rewardPerBlock: BigNumber;
      totalPaidRewards: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
    }>;

    "rewardPoolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      rewardToken: string;
      rewardPerBlock: BigNumber;
      totalPaidRewards: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
    }>;

    rewardPoolLength(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardPoolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "set(uint256,uint256)"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTimelock(_timelock: string, overrides?: CallOverrides): Promise<void>;

    "setTimelock(address)"(
      _timelock: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setUnstakingFrozenTime(
      _unstakingFrozenTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setUnstakingFrozenTime(uint256)"(
      _unstakingFrozenTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakedWantTokens(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "stakedWantTokens(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    startBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "startBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    timelock(overrides?: CallOverrides): Promise<string>;

    "timelock()"(overrides?: CallOverrides): Promise<string>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    "totalAllocPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

    unfrozenStakeTime(
      _pid: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "unfrozenStakeTime(uint256,address)"(
      _pid: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unstakingFrozenTime(overrides?: CallOverrides): Promise<BigNumber>;

    "unstakingFrozenTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    updatePool(_pid: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "updatePool(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRewardPerBlock(
      _rewardPid: BigNumberish,
      _rewardPerBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateRewardPerBlock(uint256,uint256)"(
      _rewardPid: BigNumberish,
      _rewardPerBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      shares: BigNumber;
      lastStakeTime: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "userInfo(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      shares: BigNumber;
      lastStakeTime: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    withdraw(
      _pid: BigNumberish,
      _wantAmt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(uint256,uint256)"(
      _pid: BigNumberish,
      _wantAmt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAll(_pid: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "withdrawAll(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Deposit(
      user: string | null,
      pid: BigNumberish | null,
      amount: null
    ): EventFilter;

    EmergencyWithdraw(
      user: string | null,
      pid: BigNumberish | null,
      amount: null
    ): EventFilter;

    ExecuteTransaction(
      target: string | null,
      value: null,
      signature: null,
      data: null
    ): EventFilter;

    Initialized(executor: string | null, at: null): EventFilter;

    RewardPaid(
      rewardPid: BigNumberish | null,
      token: string | null,
      user: string | null,
      amount: null
    ): EventFilter;

    Withdraw(
      user: string | null,
      pid: BigNumberish | null,
      amount: null
    ): EventFilter;
  };

  estimateGas: {
    add(
      _allocPoint: BigNumberish,
      _want: string,
      _withUpdate: boolean,
      _strategy: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "add(uint256,address,bool,address)"(
      _allocPoint: BigNumberish,
      _want: string,
      _withUpdate: boolean,
      _strategy: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addRewardPool(
      _rewardToken: string,
      _rewardPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addRewardPool(address,uint256)"(
      _rewardToken: string,
      _rewardPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    deposit(
      _pid: BigNumberish,
      _wantAmt: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deposit(uint256,uint256)"(
      _pid: BigNumberish,
      _wantAmt: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "emergencyWithdraw(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    executeTransaction(
      target: string,
      value: BigNumberish,
      signature: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "executeTransaction(address,uint256,string,bytes)"(
      target: string,
      value: BigNumberish,
      signature: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getMultiplier(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMultiplier(uint256,uint256)"(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    inCaseTokensGetStuck(
      _token: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "inCaseTokensGetStuck(address,uint256,address)"(
      _token: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initialize(
      _startBlock: BigNumberish,
      _bfi: string,
      _bfiRewardRate: BigNumberish,
      _bdo: string,
      _bdoRewardRate: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(uint256,address,uint256,address,uint256)"(
      _startBlock: BigNumberish,
      _bfi: string,
      _bfiRewardRate: BigNumberish,
      _bdo: string,
      _bdoRewardRate: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initialized(overrides?: CallOverrides): Promise<BigNumber>;

    "initialized()"(overrides?: CallOverrides): Promise<BigNumber>;

    massUpdatePools(overrides?: Overrides): Promise<BigNumber>;

    "massUpdatePools()"(overrides?: Overrides): Promise<BigNumber>;

    operator(overrides?: CallOverrides): Promise<BigNumber>;

    "operator()"(overrides?: CallOverrides): Promise<BigNumber>;

    pendingReward(
      _pid: BigNumberish,
      _rewardPid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingReward(uint256,uint256,address)"(
      _pid: BigNumberish,
      _rewardPid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolInfo(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "poolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPoolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rewardPoolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardPoolLength(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardPoolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "set(uint256,uint256)"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setTimelock(_timelock: string, overrides?: Overrides): Promise<BigNumber>;

    "setTimelock(address)"(
      _timelock: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setUnstakingFrozenTime(
      _unstakingFrozenTime: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setUnstakingFrozenTime(uint256)"(
      _unstakingFrozenTime: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    stakedWantTokens(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "stakedWantTokens(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    startBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "startBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    timelock(overrides?: CallOverrides): Promise<BigNumber>;

    "timelock()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    "totalAllocPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

    unfrozenStakeTime(
      _pid: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "unfrozenStakeTime(uint256,address)"(
      _pid: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unstakingFrozenTime(overrides?: CallOverrides): Promise<BigNumber>;

    "unstakingFrozenTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    updatePool(_pid: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "updatePool(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateRewardPerBlock(
      _rewardPid: BigNumberish,
      _rewardPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateRewardPerBlock(uint256,uint256)"(
      _rewardPid: BigNumberish,
      _rewardPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userInfo(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _pid: BigNumberish,
      _wantAmt: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdraw(uint256,uint256)"(
      _pid: BigNumberish,
      _wantAmt: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawAll(_pid: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "withdrawAll(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    add(
      _allocPoint: BigNumberish,
      _want: string,
      _withUpdate: boolean,
      _strategy: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "add(uint256,address,bool,address)"(
      _allocPoint: BigNumberish,
      _want: string,
      _withUpdate: boolean,
      _strategy: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addRewardPool(
      _rewardToken: string,
      _rewardPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addRewardPool(address,uint256)"(
      _rewardToken: string,
      _rewardPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deposit(
      _pid: BigNumberish,
      _wantAmt: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deposit(uint256,uint256)"(
      _pid: BigNumberish,
      _wantAmt: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "emergencyWithdraw(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    executeTransaction(
      target: string,
      value: BigNumberish,
      signature: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "executeTransaction(address,uint256,string,bytes)"(
      target: string,
      value: BigNumberish,
      signature: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getMultiplier(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMultiplier(uint256,uint256)"(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    inCaseTokensGetStuck(
      _token: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "inCaseTokensGetStuck(address,uint256,address)"(
      _token: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _startBlock: BigNumberish,
      _bfi: string,
      _bfiRewardRate: BigNumberish,
      _bdo: string,
      _bdoRewardRate: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(uint256,address,uint256,address,uint256)"(
      _startBlock: BigNumberish,
      _bfi: string,
      _bfiRewardRate: BigNumberish,
      _bdo: string,
      _bdoRewardRate: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "initialized()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    massUpdatePools(overrides?: Overrides): Promise<PopulatedTransaction>;

    "massUpdatePools()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    operator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "operator()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingReward(
      _pid: BigNumberish,
      _rewardPid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pendingReward(uint256,uint256,address)"(
      _pid: BigNumberish,
      _rewardPid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "poolLength()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardPoolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewardPoolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardPoolLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewardPoolLength()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "set(uint256,uint256)"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setTimelock(
      _timelock: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setTimelock(address)"(
      _timelock: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setUnstakingFrozenTime(
      _unstakingFrozenTime: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setUnstakingFrozenTime(uint256)"(
      _unstakingFrozenTime: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stakedWantTokens(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stakedWantTokens(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    startBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "startBlock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timelock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "timelock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAllocPoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalAllocPoint()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unfrozenStakeTime(
      _pid: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "unfrozenStakeTime(uint256,address)"(
      _pid: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unstakingFrozenTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "unstakingFrozenTime()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updatePool(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updatePool(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateRewardPerBlock(
      _rewardPid: BigNumberish,
      _rewardPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateRewardPerBlock(uint256,uint256)"(
      _rewardPid: BigNumberish,
      _rewardPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userInfo(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _pid: BigNumberish,
      _wantAmt: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256,uint256)"(
      _pid: BigNumberish,
      _wantAmt: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawAll(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawAll(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
